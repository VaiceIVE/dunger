// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Size {
  id String @id
  name String @unique
  creature Creature[]
}

model Source {
  id Int @default(autoincrement()) @id()
  key String @unique
  title String 

  creatures Creature[]
}

model Language {
  id Int @default(autoincrement()) @id
  name String @unique

  creatures Creature[]
}

model Biome {
  id Int @default(autoincrement()) @id()
  key String @unique
  title String

  creatures Creature[]
}

model Type{
  id Int @default(autoincrement()) @id
  name String // аберрация, гуманоид итд
  
  creatures Creature[]
}

model Alignment{
  id Int @default(autoincrement()) @id
  name String @unique

  creatures Creature[]
}

model Speed_stat{
  id String @id
  walk Int?
  fly Int?
  swim Int?
  burrow Int?
  climb Int?

  id_relation Creature @relation(references: [id], fields: [id])
}

model Creature_stats{
  id String @id
  
  strength Strength_stat_details? 
  dexterity Dexterity_stat_details? 
  constitution Constitution_stat_details? 
  intellegence Intellegence_stat_details? 
  wisdom Wisdom_stat_details? 
  charisma Charisma_stat_details? 

  id_relation Creature @relation(references: [id], fields: [id])
}

model Strength_stat_details {
  statblock_id String @id
  value Int
  mastery Boolean

  creature_stat Creature_stats @relation(fields: [statblock_id], references: [id])
}

model Dexterity_stat_details {
  statblock_id String @id
  value Int
  mastery Boolean

  creature_stat Creature_stats @relation(fields: [statblock_id], references: [id])
}

model Constitution_stat_details {
  statblock_id String @id
  value Int
  mastery Boolean

  creature_stat Creature_stats @relation(fields: [statblock_id], references: [id])
}

model Intellegence_stat_details {
  statblock_id String @id
  value Int
  mastery Boolean

  creature_stat Creature_stats @relation(fields: [statblock_id], references: [id])
}

model Wisdom_stat_details {
  statblock_id String @id
  value Int
  mastery Boolean

  creature_stat Creature_stats @relation(fields: [statblock_id], references: [id])
}

model Charisma_stat_details {
  statblock_id String @id
  value Int
  mastery Boolean

  creature_stat Creature_stats @relation(fields: [statblock_id], references: [id])
}

model SkillsList {
  id String @id
  athletics Int?
  acrobatics Int?
  sleight_of_hand Int?
  stealth Int?
  arcana Int?
  history Int?
  investigation Int?
  nature Int?
  religion Int?
  animal_handling Int?
  insight Int?
  medicine Int?
  perception Int?
  survival Int?
  deception Int?
  intimidation Int?
  performance Int?
  persuasion Int?

  id_relation Creature @relation(references: [id], fields: [id])
}

model Skill{
  id Int @id @default(autoincrement())
  name String @unique
  stat Stat
}

model Creature {
  id String @default(uuid()) @id 
  name String
  image_uri String?
  description String?
  size String? 
  race_id Int? //Тип с действиями и свойствами, как Дроу или горный гном 
  soirce_id Int?
  alignment_id Int?
  speed Speed_stat?
  armor_class Int?
  hit_points Int?
  stats Creature_stats?
  skills SkillsList?
  resistances DamageType[] @relation("creature_resistances")
  immunities DamageType[] @relation("creature_immunities")
  vunlerabilities DamageType[] @relation("creature_vunlerabilities")
  // senses
  // conditionImmune
  senses Senses?
  challenge_rating String
  languages Language[]
  biome_id Int?
  sType Int? //TODO
  aSubTypes String[] //TODO
  actions Action[]
  traits Trait[]
  alignment_relation Alignment? @relation(references: [id], fields: [alignment_id])
  race_relation CreatureRace? @relation(references: [id], fields: [race_id])
  type_relation Type? @relation(references: [id], fields: [sType])
  size_relation Size? @relation(references: [name], fields: [size])
  biome_relation Biome[] 
  source_relation Source? @relation(references: [id], fields: [soirce_id])
}

model Senses {
  creature_id String @id
  passive_perception Int?


  creature Creature @relation(fields: [creature_id], references: [id])
}

model Action {
  id Int @default(autoincrement()) @id
  name String 
  description String @unique
  attack String?
  creatures Creature[]
  creatureTypes CreatureRace[]
}

model Trait {
  id Int @default(autoincrement()) @id
  name String 
  description String @unique
  attack String?
  cretures Creature[]
  creatureTypes CreatureRace[]
}

model CreatureRace{
  id Int @default(autoincrement()) @id
  name String
  description String
  traits Trait[]
  actions Action[]
  creatures Creature[]
}

model GenrationRequest{
  id Int @default(autoincrement()) @id
  request String
  danger String //todo
  name String
}


model DamageType {
  id String @id
  name String


  resistant_creatures Creature[] @relation("creature_resistances")
  immune_creatures Creature[] @relation("creature_immunities")
  vunlerable_creatures Creature[] @relation("creature_vunlerabilities")

}

model ChallengeRating {
  id String @id
}

enum Stat {
  Strength  
  Dexterity   
  Constitution  
  Intelegence  
  Wisdom 
  Charisma
}

