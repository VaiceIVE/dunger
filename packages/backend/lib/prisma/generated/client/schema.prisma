// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Size {
  id       String     @id
  name     String     @unique
  creature Creature[]

  @@map("sizes")
}

model Source {
  id         Int    @id() @default(autoincrement())
  short_name String @unique
  name       String

  creatures  Creature[]
  magicItems MagicItem[]

  @@map("sources")
}

model Language {
  id   Int    @id @default(autoincrement())
  name String @unique

  creatures_relation Creature[] @relation("creature_languages")

  @@map("languages")
}

model Biome {
  id         Int    @id @default(autoincrement())
  short_name String @unique
  name       String @unique

  creatures_relation Creature[] @relation("creature_biomes")

  @@map("biomes")
}

model Type {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  creatures Creature[]

  @@map("types")
}

model Alignment {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  creatures Creature[]

  @@map("alignments")
}

model CreatureSpeed {
  id     String @id
  walk   Int?
  fly    Int?
  swim   Int?
  burrow Int?
  climb  Int?

  creature_relation Creature @relation(references: [id], fields: [id])

  @@map("creature_speeds")
}

enum Ability {
  STRENGTH
  DEXTERITY
  CONSTITUTION
  INTELLIGENCE
  WISDOM
  CHARISMA

  @@map("ability_enum")
}

enum Skill {
  ATHLETICS
  ACROBATICS
  SLEIGHT_OF_HAND
  STEALTH
  ARCANA
  HISTORY
  INVESTIGATION
  NATURE
  RELIGION
  ANIMAL_HANDLING
  INSIGHT
  MEDICINE
  PERCEPTION
  SURVIVAL
  DECEPTION
  INTIMIDATION
  PERFORMANCE
  PERSUASION

  @@map("skill_enum")
}

model CreatureStats {
  id String @id

  stats CreatureStatDetail[]

  creature_relation Creature @relation(fields: [id], references: [id])

  @@map("creature_stats")
}

model CreatureStatDetail {
  id      String  @id @default(cuid())
  ability Ability
  value   Int
  mastery Boolean

  creature_stats_relation CreatureStats @relation(fields: [creature_stats_id], references: [id])
  creature_stats_id       String

  @@unique([creature_stats_id, ability])
  @@map("creature_stat_details")
}

model CreatureSkills {
  id                String                @id
  skills            CreatureSkillDetail[]
  creature_relation Creature              @relation(fields: [id], references: [id])

  @@map("creature_skills")
}

model CreatureSkillDetail {
  id                       String         @id @default(cuid())
  skill                    Skill
  value                    Int?
  mastery                  Boolean
  creature_skills_id       String
  creature_skills_relation CreatureSkills @relation(fields: [creature_skills_id], references: [id])

  @@unique([creature_skills_id, skill])
  @@map("creature_skill_details")
}

model SkillMetadata {
  skill        Skill   @id
  display_name String
  ability      Ability

  @@map("skill_metadata")
}

model Creature {
  id               String  @id @default(uuid())
  name             String
  creator_id       String?
  description      String?
  size             String?
  race_id          Int?
  type_id          Int?
  source_id        Int?
  alignment_id     Int?
  armor_class      Int?
  hit_points       Int?
  challenge_rating String

  // Отдельные связанные объекты
  speed  CreatureSpeed?  @relation
  stats  CreatureStats?  @relation
  skills CreatureSkills? @relation
  senses CreatureSenses? @relation

  // Отношения к справочникам
  challenge_rating_meta ChallengeRatingMetadata @relation(fields: [challenge_rating], references: [display])
  alignment_relation    Alignment?              @relation(fields: [alignment_id], references: [id])
  race_relation         CreatureRace?           @relation(fields: [race_id], references: [id])
  type_relation         Type?                   @relation(fields: [type_id], references: [id])
  size_relation         Size?                   @relation(fields: [size], references: [name])
  source_relation       Source?                 @relation(fields: [source_id], references: [id])

  // Множество значений — связи многие-ко-многим (через join-таблицы)
  resistances        DamageType[] @relation("creature_resistances")
  immunities         DamageType[] @relation("creature_immunities")
  vulnerabilities    DamageType[] @relation("creature_vulnerabilities")
  languages_relation Language[]   @relation("creature_languages")
  biomes_relation    Biome[]      @relation("creature_biomes")
  actions_relation   Action[]     @relation("creature_actions")
  traits_relation    Trait[]      @relation("creature_traits")

  // История запросов
  gpt_request_relation GPTCreatureRequest? @relation

  @@map("creatures")
}

model CreatureSenses {
  id                 String @id @default(cuid())
  creature_id        String
  passive_perception Int?

  creature_relation Creature @relation(fields: [creature_id], references: [id])

  @@unique([creature_id])
  @@map("creature_senses")
}

model Action {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @unique
  attack      String?
  is_template Boolean?

  creatures_relation      Creature[]     @relation("creature_actions")
  creature_races_relation CreatureRace[] @relation("creature_races_actions")

  @@map("actions")
}

model Trait {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @unique
  attack      String?
  is_template Boolean?

  creatures_relation      Creature[]     @relation("creature_traits")
  creature_races_relation CreatureRace[] @relation("creature_races_traits")

  @@map("traits")
}

model CreatureRace {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  traits_relation    Trait[]    @relation("creature_races_traits")
  actions_relation   Action[]   @relation("creature_races_actions")
  creatures_relation Creature[]

  @@map("creature_races")
}

model DamageType {
  id   String @id
  name String @unique

  resistant_creatures_relation  Creature[] @relation("creature_resistances")
  immune_creatures_relation     Creature[] @relation("creature_immunities")
  vulnerable_creatures_relation Creature[] @relation("creature_vulnerabilities")

  @@map("damage_types")
}

enum ChallengeRatingEnum {
  CR_0
  CR_1_8
  CR_1_4
  CR_1_2
  CR_1
  CR_2
  CR_3
  CR_4
  CR_5
  CR_6
  CR_7
  CR_8
  CR_9
  CR_10
  CR_11
  CR_12
  CR_13
  CR_14
  CR_15
  CR_16
  CR_17
  CR_18
  CR_19
  CR_20
  CR_21
  CR_22
  CR_23
  CR_24
  CR_25
  CR_26
  CR_27
  CR_28
  CR_29
  CR_30

  @@map("challenge_rating_enum")
}

model ChallengeRatingMetadata {
  cr        ChallengeRatingEnum @id
  display   String              @unique
  numeric   Float
  xp_reward Int

  creatures Creature[]

  @@map("challenge_rating_metadata")
}

enum CreatureRole {
  OFFENCE
  DEFENCE
}

model GPTCreatureRequest {
  id                   Int           @id @default(autoincrement())
  creature_id          String        @unique
  name                 String
  challenge_rating     String
  type_name            String
  creation_description String?
  role                 CreatureRole?
  createdAt            DateTime      @default(now())

  creature_relation Creature @relation(fields: [creature_id], references: [id])

  @@map("gpt_creature_request")
}

model Adventure {
  id         String @id @default(uuid())
  name       String
  genre_id   String
  creator_id String

  genre_relation    Genre     @relation(fields: [genre_id], references: [id])
  keywords_relation Keyword[] @relation("adventure_keywords")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("adventures")
}

model Keyword {
  id       String @id @default(uuid())
  name     String
  genre_id String

  genre_relation      Genre       @relation(fields: [genre_id], references: [id])
  adventures_relation Adventure[] @relation("adventure_keywords")

  @@map("keywords")
}

model Genre {
  id   String @id @default(uuid())
  name String

  keywords_relation   Keyword[]
  adventures_relation Adventure[]

  @@map("genres")
}

enum Gender {
  HE
  SHE
  IT

  @@map("gender_enum")
}

model MagicItem {
  id                  String  @id @default(uuid())
  name                String
  description         String
  type_id             String
  rarity_id           String
  source_id           Int
  requires_attunement Boolean @default(false)

  type_relation        MagicItemType         @relation(fields: [type_id], references: [id])
  rarity_relation      MagicItemRarity       @relation(fields: [rarity_id], references: [id])
  source_relation      Source                @relation(fields: [source_id], references: [id])
  attunements_relation MagicItemAttunement[] @relation("MagicItemToAttunement")

  @@map("magic_items")
}

model MagicItemRarity {
  id       String @id
  cost     String
  name     String
  name_he  String
  name_she String
  name_it  String
  order    Int

  magicItems MagicItem[]

  @@map("magic_item_rarities")
}

model MagicItemType {
  id     String @id
  name   String
  gender Gender

  magicItems MagicItem[]

  @@map("magic_item_types")
}

model AttunementCondition {
  id         String                @id @default(uuid()) @map("id")
  name       String                @unique @map("name")
  magicItems MagicItemAttunement[] @relation("AttunementToMagicItem")

  @@map("attunement_conditions")
}

model MagicItemAttunement {
  magicItemId  String
  attunementId String

  magicItem  MagicItem           @relation("MagicItemToAttunement", fields: [magicItemId], references: [id])
  attunement AttunementCondition @relation("AttunementToMagicItem", fields: [attunementId], references: [id])

  @@id([magicItemId, attunementId])
  @@map("magic_item_attunements")
}
