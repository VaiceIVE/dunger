import * as stylex from '@stylexjs/stylex';
import { Button, ButtonVariant, Container, Flex, Grid, headers, Stack, Tag, text } from '@dunger/ui';
import { colors } from '@dunger/ui/tokens.stylex';
import { words } from './mock';
import { AnvilIcon } from '.';

const sections = [
  { url: '', isManual: true },
  { url: '', isManual: false },
  { url: '', isManual: false },
  { url: '', isManual: true },
  { url: '', isManual: false },
  { url: '', isManual: true }
];

export const NoAuthPage = () => {
  return (
    <main {...stylex.props(styles.root)}>
      <Container>
        <Stack gap={80}>
          <div {...stylex.props(styles.banner)}>
            <Stack gap={32}>
              <Stack gap={16}>
                <h1 {...stylex.props(headers.h1Bold)}>–°–æ–∑–¥–∞–≤–∞–π, –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–π, –≤–ª–∞—Å—Ç–≤—É–π!</h1>
                <h3 {...stylex.props(headers.h3Medium)}>
                  –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –ª—É—Ç–∞ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è! üöÄ
                </h3>
              </Stack>
              <Button variant={ButtonVariant.accent}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</Button>
            </Stack>
          </div>

          <Stack gap={28} align="center">
            <Stack align="center" gap={16}>
              <h2 {...stylex.props(headers.h2Bold)}>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤ –≤ –±–µ—Å—Ç–∏–∞—Ä–∏–∏</h2>
              <h3 {...stylex.props(headers.h3Medium)}>
                –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤, –∑–≤–µ—Ä–µ–π –∏ —Å—É—â–µ—Å—Ç–≤ –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!
              </h3>
            </Stack>
            <Grid gap={16} rowGap={16}>
              <Grid.Col style={styles.card} span={6}>
                <Stack gap={32} style={styles.cardContent}>
                  <Flex justify={'space-between'} gap={32} wrap="nowrap" align="flex-start">
                    <Stack gap={12}>
                      <h3 {...stylex.props(headers.h3Semibold)}>–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</h3>
                      <div {...stylex.props(text.defaultMedium, styles.cardDescription)}>
                        –û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –≤ –ø–∞—Ä—É —Å–ª–æ–≤–∞—Ö –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äì –∏ –ò–ò —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è –≤–∞—Å —Å—É—â–µ—Å—Ç–≤–æ —Å
                        —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
                      </div>
                    </Stack>
                    <div>
                      <AnvilIcon />
                    </div>
                  </Flex>
                  <div {...stylex.props(styles.cardImage)}></div>
                </Stack>
              </Grid.Col>

              <Grid.Col style={styles.card} span={6}>
                <Stack gap={32} style={styles.cardContent}>
                  <Flex justify={'space-between'} gap={32} wrap="nowrap" align="flex-start">
                    <Stack gap={12}>
                      <h3 {...stylex.props(headers.h3Semibold)}>–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</h3>
                      <div {...stylex.props(text.defaultMedium, styles.cardDescription)}>
                        –û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –≤ –ø–∞—Ä—É —Å–ª–æ–≤–∞—Ö –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äì –∏ –ò–ò —Å–æ–∑–¥–∞—Å—Ç –¥–ª—è –≤–∞—Å —Å—É—â–µ—Å—Ç–≤–æ —Å
                        —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
                      </div>
                    </Stack>
                    <div>
                      <AnvilIcon />
                    </div>
                  </Flex>
                  <div {...stylex.props(styles.cardImage)}></div>
                </Stack>
              </Grid.Col>
            </Grid>
            <Button variant={ButtonVariant.primary}>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å</Button>
          </Stack>

          <Stack gap={28} align="center">
            <Stack align="center" gap={16}>
              <h2 {...stylex.props(headers.h2Bold)}>–°—É—â–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω—ã —É –Ω–∞—Å</h2>
              <h3 {...stylex.props(headers.h3Medium)}>–ë–µ—Å—Ç–∏–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤</h3>
            </Stack>
            <Grid gap={16} rowGap={16}>
              {sections.map((s, index) => (
                <Grid.Col style={styles.creatureSection} span={4} key={index}>
                  <img {...stylex.props(styles.creatureImage)} />
                  <Tag color={s.isManual ? 'orange' : 'blue'}>{s.isManual ? '–°–æ–∑–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ'}</Tag>
                </Grid.Col>
              ))}
            </Grid>
          </Stack>
          <Flex rowGap={48} justify="space-between" wrap="nowrap">
            <Stack gap={24}>
              <Stack gap={16}>
                <h2 {...stylex.props(headers.h2Bold)}>
                  –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã <br />
                  –¥–ª—è –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                </h2>
                <h3 {...stylex.props(headers.h3Medium)}>
                  –ü–æ–º–æ–∂–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç
                  <br /> –ø–æ–ª–µ–∑–Ω—ã –∏–º–µ–Ω–Ω–æ –≤–∞—à–∏–º –∏–≥—Ä–æ–∫–∞–º –∏ —Å—É—â–µ—Å—Ç–≤–∞–º
                </h3>
              </Stack>
              <Button>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å</Button>
            </Stack>
            <img {...stylex.props(styles.creatureImage)}></img>
          </Flex>
          <Stack gap={28}>
            <Stack gap={16} align="center">
              <h2 {...stylex.props(headers.h2Bold)}>–ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏—é</h2>
              <h3 {...stylex.props(headers.h3Medium, styles.h3ThirdSection)}>
                –ú—ã –ø–æ–∫–∞–∂–µ–º –≤–∞–º –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∏–¥–µ —Ç—ç–≥–æ–≤, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ
                <br /> –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ö–æ–¥–µ –∏–≥—Ä—ã
              </h3>
            </Stack>
            <Flex gap={12} rowGap={12} justify="center">
              {words.map((w) => (
                <div {...stylex.props(styles.word, text.smallMedium)} key={w}>
                  {w}
                </div>
              ))}
            </Flex>
          </Stack>
        </Stack>
      </Container>
    </main>
  );
};
const styles = stylex.create({
  root: {
    color: colors.textPrimaryDefault
  },
  banner: {
    alignItems: 'flex-start',
    borderColor: colors.outlinePrimaryDefault,
    borderRadius: 20,
    borderStyle: 'solid',
    borderWidth: 1,
    display: 'flex',
    gap: 32,
    height: 256,
    padding: 56
  },
  card: {
    alignItems: 'flex-end',
    backgroundColor: '#F6F6F7',

    borderRadius: 20,

    display: 'flex',
    gap: 32,
    padding: 32
  },
  cardImage: {
    backgroundColor: 'gray',
    display: 'flex',
    height: 222,
    alignSelf: 'center',
    borderRadius: 12,

    width: 400
  },
  cardContent: {
    width: '100%'
  },
  cardDescription: {
    color: colors.textSecondaryDefault
  },
  creatureImage: {
    backgroundColor: 'gray',
    display: 'flex',
    height: 296,
    borderColor: colors.outlinePrimaryDefault,
    borderRadius: 13,
    borderStyle: 'solid',
    borderWidth: 1,
    width: 470
  },
  creatureSection: {
    alignItems: 'flex-start',
    display: 'flex',
    flexDirection: 'column',
    gap: 16,
    height: 256
  },
  word: {
    backgroundColor: colors.backgroundUniversal,
    borderRadius: 12,
    padding: '12px 20px',
    color: colors.textSecondaryDefault
  },
  h3ThirdSection: {
    textAlign: 'center'
  }
});
